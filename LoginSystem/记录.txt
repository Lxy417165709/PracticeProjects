
## go后端
- 使用的包
	- github.com/astaxie/beego/logs		// 用于日志输出
	- github.com/dgrijalva/jwt-go		// 用于生成token
	- github.com/go-ini/ini				// 用于生成配置
	- github.com/lib/pq					// 用于操作postgres数据库
	
## 部署操作如下
1. 修改go_server中Dockerfile的内容，将需要导入的包下载
	RUN go get github.com/lib/pq && go get github.com/astaxie/beego/logs && go get github.com/dgrijalva/jwt-go && go get github.com/go-ini/ini && go build .
	
2. 修改数据库初始化文件createTables.sql，将其放入postgres/init_db。

3. 通过 npm run build --prod 建造前端项目，将生成的dist/Client中的Client放入 nginx目录下

4. 配置nginx的配置文件 myconf.conf, 
	# 注意修改 /Server！ 现在的话是/server，这和前端的反向代理文件差不多
    location /server {
        proxy_pass   http://golang:8080; # golang是Dockerfile中go的容器名,8080是go监听的端口
    }
	
5. 修改GO后端的配置conf.inf, 将数据库配置的主机修改为 "pg_db"  (docker中的容器名)

6. 修改dockercompose配置文件
	修改所处网络
	networks:
      - my-net  # 表示在同一my-net网络下
	
	修改操作的数据库
	environment:
      POSTGRES_USER: postgres # 默认的操作用户名
      POSTGRES_PASSWORD: 123456 # 操作用户密码
      POSTGRES_DB: db_test # 应该是默认的操作数据库